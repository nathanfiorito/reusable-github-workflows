name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  workflow_call:
    inputs:
      pr_number:
        description: Pull request number to review when the workflow is reused.
        type: string
        default: ""
        required: false
      repo_name:
        description: Optional repository (owner/name) override for the PR.
        required: false
        type: string
      python_version:
        description: Versão do Python
        default: "3.12"
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-code-review:
    name: OpenAI Code Review
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reusable repo (este repo)
        uses: actions/checkout@v4
        with:
          repository: nathanfiorito/reusable-github-workflows
          path: reusable
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Resolver contexto do review
        id: review_context
        shell: bash
        run: |
          set -euo pipefail

          pr_number=""
          repo_name="${GITHUB_REPOSITORY}"

          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            pr_number="${PULL_NUMBER_EVENT}"
          else
            pr_number="${INPUT_PR_NUMBER}"
            if [ -n "${INPUT_REPO_NAME}" ]; then
              repo_name="${INPUT_REPO_NAME}"
            fi
          fi

          if [ -z "${pr_number}" ]; then
            echo "::error::Não foi possível determinar o número do PR. Informe 'pr_number' ao reutilizar este workflow."
            exit 1
          fi

          echo "pr_number=${pr_number}" >> "$GITHUB_OUTPUT"
          echo "repo_name=${repo_name}" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PULL_NUMBER_EVENT: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          INPUT_PR_NUMBER: ${{ inputs.pr_number }}
          INPUT_REPO_NAME: ${{ inputs.repo_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        working-directory: reusable/scripts/python
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install openai requests PyGithub

      - name: Run AI Code Review
        working-directory: reusable
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.review_context.outputs.pr_number }}
          REPO_NAME: ${{ steps.review_context.outputs.repo_name }}
        run: |
          ls -la
          echo "Running script: scripts/python/ai-code-review.py"
          python scripts/python/ai-code-review.py

      - name: Comment summary on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const summaryPath = 'reusable/review-summary.md';

            if (fs.existsSync(summaryPath)) {
              const summary = fs.readFileSync(summaryPath, 'utf8').trim();
              if (summary.length > 0) {
                const [owner, repo] = '${{ steps.review_context.outputs.repo_name }}'.split('/');
                const issueNumber = Number('${{ steps.review_context.outputs.pr_number }}');

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  body: summary
                });
              }
            }

      - name: Upload review results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-review-results
          path: |
            reusable/review-summary.md
            reusable/review-details.json
          if-no-files-found: ignore
          retention-days: 30
